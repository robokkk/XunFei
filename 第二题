#include<iostream>  
#include<iomanip>     
using namespace std;
int const n = 3;   


int main()
{   
    int aba;
    cout << "输入矩阵的阶数a" << endl;
    cin >> aba;
    void temp(double aa[], double bb[], int n);
    double fun(double array[n][n]);
    double a[n][n], b[n][2 * n], c[n][n], det1, yinzhi;
    double bb;
    int i, j, kk = 0, k, u;
    for (i = 0; i < n; i++)  
        for (j = 0; j < 2 * n; j++)
            b[i][j] = 0;

    cout << "请输入一个" << n << "节方阵" << endl;
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            cin >> a[i][j];

    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            b[i][j] = a[i][j];

    for (j = 0; j < n; j++)
        b[j][n + j] = 1;


    for (i = 0; i < n; i++)
    {

        if (b[i][i] == 0)
            for (j = i; j < n; j++)
            {
                if (b[j][i] != 0)
                    temp(b[i], b[j], 2 * n);   
            }

        for (k = i + 1; k < n; k++)
        {
            yinzhi = -1 * b[k][i] / b[i][i];
            for (u = 0; u < 2 * n; u++)
            {
                b[k][u] = b[k][u] + b[i][u] * yinzhi;
            }
        }
    }


    det1 = fun(a);  
    if (det1 == 0) 
    {
        cout << "此矩阵不可逆：" << endl;
        return 0;
    }
    if (det1 != 0)
    {
        for (i = 0; i < n; i++)   
        {
            bb = b[i][i];   
            for (j = 0; j < 2 * n; j++)
                b[i][j] = b[i][j] / bb;
        }
        for (i = n - 1; i > 0; i--)
            for (k = 0; k < i; k++)
            {
                bb = b[k][i];
                for (u = 0; u < 2 * n; u++)
                    b[k][u] = b[k][u] - bb * b[i][u];
            }
    }
 

    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            c[i][j] = b[i][j + n];

    kk = 0;
    if (det1 != 0) 
    {
        cout << "其可逆且其行列式的值det为：" << det1 << endl << endl;
        cout << "可逆a矩阵的逆矩阵为c矩阵：" << endl;

        for (i = 0; i < n; i++)
            for (j = 0; j < n; j++)
            {
                cout << setw(15) << c[i][j];
                kk = kk + 1;
                if (kk % n == 0)
                    cout << endl;
            }
    }
    return 0;
}

void temp(double aa[], double bb[], int n)
{  
    int i;
    double temp1;
    for (i = 0; i < n; i++)
    {
        temp1 = aa[i];
        aa[i] = bb[i];
        bb[i] = temp1;
    }
}

double fun(double array[n][n])
{
    int ii, jj, k, u;
    int iter = 0;
    double det1 = 1, yin;

    for (ii = 0; ii < n; ii++)
    {
        if (array[ii][ii] == 0)
            for (jj = ii; jj < n; jj++)
            {
                if (array[jj][ii] != 0)
                {
                    temp(array[ii], array[jj], n);//交换两行   
                    iter++;
                }
            }
        for (k = ii + 1; k < n; k++)
        {
            yin = -1 * array[k][ii] / array[ii][ii];
            for (u = 0; u < n; u++)
            {
                array[k][u] = array[k][u] + array[ii][u] * yin;
            }
        }
    }
    for (ii = 0; ii < n; ii++)
        det1 = det1 * array[ii][ii];
    if (iter % 2 == 1)
        det1 = -det1;
    return (det1);      //返回行列式的值  
}


